package com.moviesAPI.moviesAPI.services;

import com.moviesAPI.moviesAPI.entities.Character;
import com.moviesAPI.moviesAPI.entities.Movie;
import com.moviesAPI.moviesAPI.repositories.CharacterRepository;
import com.moviesAPI.moviesAPI.repositories.MovieRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;

@Service
public class CharacterServices {
    @Autowired // This means to get the bean called characterRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CharacterRepository characterRepository;
    @Autowired
    private MovieRepository movieRepository;

    public void createCharacter (String name, String story, Integer age, Integer weight,
                                 List<Long> moviesIds, MultipartFile multipartImage) throws IOException {

        Character character = new Character(multipartImage.getBytes(), name,age,weight,story);
        //only previously added movies will be added to character
        if (moviesIds != null) {
            addMovies(character, moviesIds);
        }
        characterRepository.save(character);
    }
    public boolean editCharacter (Long id,String name, String story, Integer age, Integer weight,
                               List<Long> moviesIds, MultipartFile multipartImage) throws IOException {
        Optional<Character> characters = characterRepository.findById(id);
        if (!characters.isPresent()) {
            return false;
        }
        Character character = characters.get();
        if (name != null) {
            character.setName(name);
        }
        if (story != null) {
            character.setStory(story);
        }
        if (age != null) {
            character.setAge(age);
        }
        if (weight != null) {
            character.setWeight(weight);
        }
        if (moviesIds != null) {
            character.setMovies(new HashSet<>());  //removes previously added movies!
            addMovies(character,moviesIds);
        }
        if (multipartImage != null) {
            character.setImage(multipartImage.getBytes());
        }
        characterRepository.save(character);
        return true;
    }
    private Character addMovies(Character character ,List<Long> moviesIds){
        for (Long movieId : moviesIds) {
            Optional<Movie> movies = movieRepository.findById(movieId);
            if (movies.isPresent()) {
                Movie movie = movies.get();
                character.getMovies().add(movie);
            }
        }
        return character;
    }
}

package com.moviesAPI.moviesAPI.services;

import com.moviesAPI.moviesAPI.entities.Character;
import com.moviesAPI.moviesAPI.entities.Genre;
import com.moviesAPI.moviesAPI.entities.Movie;
import com.moviesAPI.moviesAPI.repositories.CharacterRepository;
import com.moviesAPI.moviesAPI.repositories.GenreRepository;
import com.moviesAPI.moviesAPI.repositories.MovieRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;

@Service
public class MovieServices {
    @Autowired // This means to get the bean called characterRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CharacterRepository characterRepository;
    @Autowired
    private MovieRepository movieRepository;
    @Autowired
    private GenreRepository genreRepository;

    public void createMovie (String title, String date, Integer rating, List<Long> genresIds,
                             List<Long> charactersIds, MultipartFile multipartImage) throws IOException {

        Movie movie = new Movie(multipartImage.getBytes(), title,date,rating);
        if (charactersIds != null) {
            addCharacters(movie,charactersIds);
        }
        //only previously added genres will be added to movie
        if (genresIds != null) {
            addGenres(movie,genresIds);
        }
        movieRepository.save(movie);
    }
    public boolean editMovie (Long id,String title, String date, Integer rating,List<Long> charactersIds,
                              List<Long> genresIds,
                              MultipartFile multipartImage) throws IOException {
        Optional<Movie> movies = movieRepository.findById(id);
        if (!movies.isPresent()) {
            return false;
        }
        Movie movie = movies.get();
        if (title != null) {
            movie.setTitle(title);
        }
        if (date != null) {
            movie.setDate(date);
        }
        if (rating != null) {
            movie.setRating(rating);
        }

        if (charactersIds != null) {
            movie.setCharacters(new HashSet<>());  //removes previously added characters!
            addCharacters(movie,charactersIds);
        }
        if (genresIds != null) {
            movie.setCharacters(new HashSet<>());  //removes previously added genres!
            addGenres(movie,genresIds);
        }
        if (multipartImage != null) {
            movie.setImage(multipartImage.getBytes());
        }
        movieRepository.save(movie);
        return true;
    }
    public Object getFilteredMoviesList(Long genreId, String title,String orderBy){
        if (title != null) {
            return movieRepository.findByTitle(title);
        }
        if (orderBy != null) {
            return "ASC".equals(orderBy) ? movieRepository.findByOrderByDateAsc() :
                    movieRepository.findByOrderByDateDesc();
        }
        if (genreId != null) {
            Optional<Genre> genresFound = genreRepository.findById(genreId);
            return genresFound.<Object>map(Genre::getMovies).orElse(null);
        }
        return movieRepository.findBy(); //returns all movies in list view if no params were given
    }
    public boolean deleteMovie (Long id) {
        Optional<Movie> movieFound = movieRepository.findById(id);
        if (!movieFound.isPresent()) {
            return false;
        }
        movieRepository.delete(movieFound.get());
        return true;
    }
    public Movie getMovieDetails(Long id) {
        return movieRepository.findById(id).orElse(null);
    }
    private Movie addGenres( Movie movie , List<Long> genresIds){
        for (Long genreId : genresIds) {
            Optional<Genre> genres = genreRepository.findById(genreId);
            if (genres.isPresent()) {
                Genre genre = genres.get();
                genre.getMovies().add(movie);
            }
        }
        return movie;
    }
    private Movie addCharacters( Movie movie , List<Long> charactersIds){
        for (Long characterId : charactersIds) {
            Optional<Character> characters = characterRepository.findById(characterId);
            if (characters.isPresent()) {
                Character character = characters.get();
                character.getMovies().add(movie);
            }
        }
        return movie;
    }
}

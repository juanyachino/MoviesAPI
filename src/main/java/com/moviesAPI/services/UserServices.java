package com.moviesAPI.services;

import com.moviesAPI.DTO.UserLoginDTO;
import com.moviesAPI.DTO.UserRegisterDTO;
import com.moviesAPI.entities.User;

import com.moviesAPI.exceptions.InvalidDataException;
import com.moviesAPI.repositories.UserRepository;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class UserServices {
    @Autowired // This means to get the bean called characterRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    EmailService sendGridEmailService;

    public String login (UserLoginDTO userDTO){
        Optional<User> userFound = userRepository.findByUsername(userDTO.getUsername());
        if ((!userFound.isPresent()) || !passwordEncoder.matches(userDTO.getPassword(), userFound.get().getPassword())) {
            return "Incorrect username and/or password. try again";
        }
        User user = userFound.get();
        String token = getJWTToken(user.getUsername());
        user.setToken(token);
        userRepository.save(user);
        return token;
    }
    public String register (UserRegisterDTO userDTO) throws InvalidDataException {
        if (userRepository.findByUsername(userDTO.getUsername()).isPresent()){
            throw new InvalidDataException("the username is already taken");
        }
        if (userRepository.findByEmail(userDTO.getEmail()).isPresent()){
            throw new InvalidDataException("the email already exists");
        }
        User user = new User();
        user.setUsername(userDTO.getUsername());
        user.setEmail(userDTO.getEmail());
        user.setPassword(passwordEncoder.encode(userDTO.getPassword()));
        userRepository.save(user);
        sendWelcomeEmail(user.getEmail(),user.getUsername());
        return "account created successfully!";
    }

    private String getJWTToken(String username) {
        String secretKey = "mySecretKey";
        List<GrantedAuthority> grantedAuthorities = AuthorityUtils
                .commaSeparatedStringToAuthorityList("ROLE_USER");

        String token = Jwts
                .builder()
                .setId("softtekJWT")
                .setSubject(username)
                .claim("authorities",
                        grantedAuthorities.stream()
                                .map(GrantedAuthority::getAuthority)
                                .collect(Collectors.toList()))
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 600000))
                .signWith(SignatureAlgorithm.HS512,
                        secretKey.getBytes()).compact();

        return "Bearer " + token;
    }
    private void sendWelcomeEmail(String email, String username) {
        sendGridEmailService.sendHTML("test@example.com",email,
                "Welcome to MoviesAPI!",
                "Hey "+username+"! Welcome to MoviesAPI. Have fun!");
    }
}
